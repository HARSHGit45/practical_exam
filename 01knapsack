def knapsack_01(values, weights, W):
    n = len(values)
    # Initialize DP table with 0s
    dp = [[0] * (W + 1) for _ in range(n + 1)]
    
    # Fill the DP table
    for i in range(1, n + 1):
        for w in range(W + 1):
            if weights[i - 1] > w:  # Current item's weight exceeds capacity
                dp[i][w] = dp[i - 1][w]
            else:  # Max of excluding or including the current item
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
    
    # Backtracking to find items included
    included_items = []
    w = W
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i - 1][w]:  # If value changed, item was included
            included_items.append(i - 1)  # Add item's index to the list
            w -= weights[i - 1]  # Reduce the remaining capacity by item's weight
    
    included_items.reverse()  # Reverse to get items in the original order
    return dp[n][W], included_items

# Example usage:
values = [60, 100, 120]
weights = [10, 20, 30]
W = 50
max_value, items_included = knapsack_01(values, weights, W)
print("Maximum value:", max_value)
print("Items included (0-indexed):", items_included)
